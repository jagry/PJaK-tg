package screens

import (
	"PJaK/core"
	"PJaK/views"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"time"
)

const (
	betsCaption      = betsCaptionEmoji + " " + betsCaptionText
	betsCaptionText  = "–ü—Ä–æ–≥–Ω–æ–∑—ã"
	betsCaptionEmoji = "üé≤"
)

const (
	betsRowCount = 6

	betsMatchIdPrefix      = "match."
	betsMatchTeam1IdPrefix = betsMatchIdPrefix + "1."
	betsMatchTeam2IdPrefix = betsMatchIdPrefix + "2."
	betsTournamentIdPrefix = "tournament."

	betsPrefixSelected = ""
	betsSuffixSelected = ""

	betsEmptyText           = "–ï—â–µ –Ω–µ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–∏—Ö —Å–µ–∑–æ–Ω–∞—Ö"
	betsLoadMatchesText     = "–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π" + loadingTextSuffix
	betsMatchesText         = "–ú–∞—Ç—á–∏:"
	betsRoundsText          = "–¢—É—Ä—ã:"
	betsRoundEmptyText      = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ"
	betsTournamentsText     = "–§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:"
	betsTournamentEmptyText = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–æ–≤ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ"
)

func bets() Section {
	return NewSection(betsCaption, betsButton, betsModify, betsSave, betsScreen, betsTeamModify)
}

func betsButton(match core.Match) string {
	view := views.Match(match)
	text := " " + view.Players(matchUndefined, ":") + " " + view.Bet("")
	if match.Team1.Result() == nil && match.Team2.Result() == nil {
		if match.Time().Sub(time.Now()) > 0 {
			text = "\U0001F7E1" + text + " / " + view.Time()
		} else {
			text = "\U0001F7E2" + text
		}
	} else {
		if match.Time().Sub(time.Now()) > 0 {
			text = "üîµ" + text
		} else {
			text = "\U0001F7E0" + text + " / " + view.Result("")
		}
	}
	return text
}

func betsModify(match core.Match) (bool, *byte, *byte) {
	if match.Time().Sub(time.Now()) < 0 {
		return false, nil, nil
	}
	return true, match.Team1.Bet(), match.Team2.Bet()
}

func betsSave(match core.Match, user int8) error {
	return core.SaveBets(*match.Team1.Bet(), *match.Team2.Bet(), match.Id, user)
}

func betsScreen(match core.Match) (string, [][]tgbotapi.InlineKeyboardButton) {
	bet1, bet2 := match.Team1.Bet(), match.Team2.Bet()
	helper1, helper2 := views.MatchTeam(match.Team1), views.MatchTeam(match.Team2)
	keys := make([][]tgbotapi.InlineKeyboardButton, 0, 3)
	text := "<pre>" + helper1.Table(matchUndefined1, bet1) + "\n" + helper2.Table(matchUndefined2, bet2) + "</pre>"
	if match.Time().Sub(time.Now()) > 0 {
		if bet1 == nil && bet2 == nil {
			text += "–ù–∞—á–∞–ª–æ –º–∞—Ç—á–∞: " + views.Match(match).Time()
		} else {
			text += "–•—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ: –º–∞—Ç—á –Ω–µ –Ω–∞—á–∞–ª—Å—è, –∞ —Å—á–µ—Ç –µ—Å—Ç—å"
		}
		keys = append(keys, helper1.Keys("", betsMatchTeam1IdPrefix, bet1))
		keys = append(keys, helper2.Keys("", betsMatchTeam2IdPrefix, bet2))
		keys = append(keys, []tgbotapi.InlineKeyboardButton{matchSaveButton})
	} else if bet1 == nil && bet2 == nil {
		text += "–ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è"
	} else {
		text += "–°—á–µ—Ç –º–∞—Ç—á–∞: " + views.Match(match).Result("")
	}
	return text, keys
}

func betsTeamModify(team *core.MatchTeam, bet byte) { team.SetBet(bet) }

func (bm BetsManager) Section(main Main, tournament *core.Tournament) string {
	return bm.section
}

func (bm BetsManager) Tournament(main Main, tournament *core.Tournament) *Loading {
	return LoadTournament(main.Base, bets(), LoadMain(main.Base, bets()), tournament)
}

type BetsManager struct {
	section string
}
